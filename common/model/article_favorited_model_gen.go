// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	articleFavoritedFieldNames          = builder.RawFieldNames(&ArticleFavorited{})
	articleFavoritedRows                = strings.Join(articleFavoritedFieldNames, ",")
	articleFavoritedRowsExpectAutoSet   = strings.Join(stringx.Remove(articleFavoritedFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	articleFavoritedRowsWithPlaceHolder = strings.Join(stringx.Remove(articleFavoritedFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	articleFavoritedModel interface {
		Insert(ctx context.Context, data *ArticleFavorited) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ArticleFavorited, error)
		Update(ctx context.Context, data *ArticleFavorited) error
		Delete(ctx context.Context, id int64) error
	}

	defaultArticleFavoritedModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ArticleFavorited struct {
		Id             int64     `db:"id"`               // id
		ArticleId      int64     `db:"article_id"`       // 文章id
		FavoriteUserId int64     `db:"favorite_user_id"` // 喜爱用户id
		DelState       int64     `db:"del_state"`        // 删除状态 0：未删除 1：已删除
		CreateTime     time.Time `db:"create_time"`      // 创建时间
		UpdateTime     time.Time `db:"update_time"`      // 更新时间
		DeleteTime     time.Time `db:"delete_time"`      // 删除时间
	}
)

func newArticleFavoritedModel(conn sqlx.SqlConn) *defaultArticleFavoritedModel {
	return &defaultArticleFavoritedModel{
		conn:  conn,
		table: "`article_favorited`",
	}
}

func (m *defaultArticleFavoritedModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultArticleFavoritedModel) FindOne(ctx context.Context, id int64) (*ArticleFavorited, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", articleFavoritedRows, m.table)
	var resp ArticleFavorited
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultArticleFavoritedModel) Insert(ctx context.Context, data *ArticleFavorited) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, articleFavoritedRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ArticleId, data.FavoriteUserId, data.DelState, data.DeleteTime)
	return ret, err
}

func (m *defaultArticleFavoritedModel) Update(ctx context.Context, data *ArticleFavorited) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, articleFavoritedRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ArticleId, data.FavoriteUserId, data.DelState, data.DeleteTime, data.Id)
	return err
}

func (m *defaultArticleFavoritedModel) tableName() string {
	return m.table
}
