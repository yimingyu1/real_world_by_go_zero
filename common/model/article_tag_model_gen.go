// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	articleTagFieldNames          = builder.RawFieldNames(&ArticleTag{})
	articleTagRows                = strings.Join(articleTagFieldNames, ",")
	articleTagRowsExpectAutoSet   = strings.Join(stringx.Remove(articleTagFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	articleTagRowsWithPlaceHolder = strings.Join(stringx.Remove(articleTagFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	articleTagModel interface {
		Insert(ctx context.Context, data *ArticleTag) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ArticleTag, error)
		Update(ctx context.Context, data *ArticleTag) error
		Delete(ctx context.Context, id int64) error
	}

	defaultArticleTagModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ArticleTag struct {
		Id         int64     `db:"id"`          // id
		ArticleId  int64     `db:"article_id"`  // 文章id
		TagId      int64     `db:"tag_id"`      // 标签id
		DelState   int64     `db:"del_state"`   // 删除状态 0：未删除 1：已删除
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 更新时间
		DeleteTime time.Time `db:"delete_time"` // 删除时间
	}
)

func newArticleTagModel(conn sqlx.SqlConn) *defaultArticleTagModel {
	return &defaultArticleTagModel{
		conn:  conn,
		table: "`article_tag`",
	}
}

func (m *defaultArticleTagModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultArticleTagModel) FindOne(ctx context.Context, id int64) (*ArticleTag, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", articleTagRows, m.table)
	var resp ArticleTag
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultArticleTagModel) Insert(ctx context.Context, data *ArticleTag) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, articleTagRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ArticleId, data.TagId, data.DelState, data.DeleteTime)
	return ret, err
}

func (m *defaultArticleTagModel) Update(ctx context.Context, data *ArticleTag) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, articleTagRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ArticleId, data.TagId, data.DelState, data.DeleteTime, data.Id)
	return err
}

func (m *defaultArticleTagModel) tableName() string {
	return m.table
}
